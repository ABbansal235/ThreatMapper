/* eslint-disable import/order */
/* eslint-disable import/named */
import React, { useEffect } from 'react';
import { DfTableV2 } from '../common/df-table-v2';
import pollable from '../common/header-view/pollable';



import { getRuntimeBomAction } from '../../actions/app-actions';
import { useDispatch, useSelector } from 'react-redux';

const humanizeString = str => str.replace(/(_)/g, ' ').replace(/^./, st => st.toUpperCase());

const RuntimeBom = (props) => {

const dispatch = useDispatch();

useEffect(() => {
  const {registerPolling, startPolling} = props;
  registerPolling(getRuntimeBomData);
  startPolling();
}, [])

useEffect(
  () => () => {
    const { stopPolling } = props;
    stopPolling();
  },
  []
);

const runtimeBomData = useSelector(state => state.get('runtime_bom')) || [];
const getRuntimeBomData = (pollParams) => {
  const {
    globalSearchQuery,
  } = pollParams;
  const params = {
    lucene_query: globalSearchQuery,
  };
  return dispatch(getRuntimeBomAction(params));
}


const tableData = runtimeBomData.data || [];


const renderSubComponent = (rowInfo) => {
    return (
        <DfTableV2
        data={rowInfo.row.original.packages}
        showPagination
        noDataText='No rows found'
        columns={[
          {
            Header: 'Package Name',
            accessor: 'package_name',
            maxWidth: 200,
          },
          {
            Header: 'File Path',
            accessor: 'filepath',
            maxWidth: 200,
          },
          {
            Header: 'CVE ID',
            accessor: 'cve_id',
            maxWidth: 200,
          },
          {
              Header: 'Vulnerability Status',
              accessor: 'vulnerability_status',
              Cell: cell =>{
               return (<div className={`${cell.value}-severity`} title={cell.row.original.top_cves}>
                  {humanizeString(cell.value)}
                </div>
              )},
              maxWidth: 50,
          },
      ]}/>
    )
}


return (
    <div className="">
        <div className="">
          <div className="report" />
          <div className="table severity-report-table">
          <DfTableV2
          data={tableData}
          showPagination
          totalRows={30}
          defaultPageSize={20}
          noDataText='No rows found'
          renderRowSubComponent={(row) => renderSubComponent(row)}
          columns={[
            {
              Header: 'Node Type',
              accessor: 'node_type',
              maxWidth: 200,
            },
            {
              Header: 'Node',
              accessor: 'node_name',
              maxWidth: 200,
            },
          ]}
        />   
          </div>
        </div>
      </div>
)
}

export default pollable()(RuntimeBom);