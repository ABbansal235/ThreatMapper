package utils

import (
	"bytes"
	"crypto/tls"
	"crypto/x509"
	"errors"
	"fmt"
	"io"
	"net"
	"net/http"
	"strings"
	"time"
)

const (
	IngestAPI           = "https://deepfence-fetcher:8006/df-api/ingest?doc_type=cve"
	IngestScanStatusAPI = "https://deepfence-fetcher:8006/df-api/ingest?doc_type=cve-scan"
)

func buildHttpClient() (*http.Client, error) {
	// Set up our own certificate pool
	tlsConfig := &tls.Config{RootCAs: x509.NewCertPool(), InsecureSkipVerify: true}
	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig:     tlsConfig,
			DisableKeepAlives:   false,
			MaxIdleConnsPerHost: 1024,
			DialContext: (&net.Dialer{
				Timeout:   15 * time.Minute,
				KeepAlive: 15 * time.Minute,
			}).DialContext,
			TLSHandshakeTimeout:   10 * time.Second,
			ResponseHeaderTimeout: 5 * time.Minute,
		},
		Timeout: 15 * time.Minute,
	}
	return client, nil
}

func callAPI(postReader io.Reader, urlPath string) error {
	// Send  data to cve server, which will put it in a redis pub-sub read by logstash
	retryCount := 0
	httpClient, err := buildHttpClient()
	if err != nil {
		return err
	}
	for {
		httpReq, err := http.NewRequest("POST", urlPath, postReader)
		if err != nil {
			return err
		}
		httpReq.Close = true
		resp, err := httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		if resp.StatusCode == 200 {
			resp.Body.Close()
			break
		} else {
			if retryCount > 2 {
				errMsg := fmt.Sprintf("Unable to complete request. Got %d ", resp.StatusCode)
				resp.Body.Close()
				return errors.New(errMsg)
			}
			resp.Body.Close()
			retryCount += 1
			time.Sleep(5 * time.Second)
		}
	}
	return nil
}

func IngestScanStatus(vulnerabilityScanMsg, action, scanId, nodeType, nodeId, scanTypeStr, hostName, kubernetesClusterName string) error {
	vulnerabilityScanMsg = strings.Replace(vulnerabilityScanMsg, "\n", " ", -1)
	scanLog := fmt.Sprintf("{\"scan_id\":\"%s\",\"time_stamp\":%d,\"cve_scan_message\":\"%s\",\"action\":\"%s\",\"type\":\"cve-scan\",\"node_type\":\"%s\",\"node_id\":\"%s\",\"scan_type\":\"%s\",\"host_name\":\"%s\",\"host\":\"%s\",\"kubernetes_cluster_name\":\"%s\"}", scanId, getIntTimestamp(), vulnerabilityScanMsg, action, nodeType, nodeId, scanTypeStr, hostName, hostName, kubernetesClusterName)
	postReader := bytes.NewReader([]byte(scanLog))
	return callAPI(postReader, IngestScanStatusAPI)
}

func Ingest(s string) error {
	if s == "" {
		return nil
	}
	postReader := bytes.NewReader([]byte(s))
	return callAPI(postReader, IngestAPI)
}
