# The values specified here are the default values that Clair uses if no configuration file is specified or if the keys are not defined.
clair:
  database:

    type: pgsql
    options:
    # PostgreSQL Connection string
    # http://www.postgresql.org/docs/9.4/static/libpq-connect.html
        source: host=${POSTGRES_FETCHER_DB_HOST} port=${POSTGRES_FETCHER_DB_PORT} sslmode=${POSTGRES_FETCHER_DB_SSLMODE} statement_timeout=60000 user='${POSTGRES_FETCHER_DB_USER}' password='${POSTGRES_FETCHER_DB_PASSWORD}' dbname=${POSTGRES_FETCHER_DB_NAME}

    # Number of elements kept in the cache
    # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
        cacheSize: 0

  api:
    # API server port
    port: 8001

    # Health server port
    # This is an unencrypted endpoint useful for load balancers to check to healthiness of the clair server.
    healthport: 8002

    # Deadline before an API request will respond with a 503
    timeout: 900s

    # 32-bit URL-safe base64 key used to encrypt pagination tokens
    # If one is not provided, it will be generated.
    # Multiple clair instances in the same cluster need the same value.
    paginationKey:

    # Optional PKI configuration
    # If you want to easily generate client certificates and CAs, try the following projects:
    # https://github.com/coreos/etcd-ca
    # https://github.com/cloudflare/cfssl
    servername:
    cafile:
    keyfile: /etc/filebeat/filebeat.key
    certfile: /etc/filebeat/filebeat.crt

  updater:
    # Frequency the database will be updated with vulnerabilities from the default data sources
    # The value 0 disables the updater entirely.
    interval: 12h

  notifier:
    # Number of attempts before the notification is marked as failed to be sent
    attempts: 3

    # Duration before a failed notification is retried
    renotifyInterval: 2h

    http:
      # Optional endpoint that will receive notifications via POST requests
      endpoint:

      # Optional PKI configuration
      # If you want to easily generate client certificates and CAs, try the following projects:
      # https://github.com/cloudflare/cfssl
      # https://github.com/coreos/etcd-ca
      servername:
      cafile:
      keyfile:
      certfile:

      # Optional HTTP Proxy: must be a valid URL (including the scheme).
      proxy:

