package vulnerabilityscanservice

import (
	"fmt"
	"net/http"
	"os"

	"github.com/deepfence/vulnerabilitymapper/scanner/grype"
	"github.com/deepfence/vulnerabilitymapper/utils"
	"github.com/gin-gonic/gin"
	log "github.com/sirupsen/logrus"
)

func New() *VulnerabilityScanService {
	return &VulnerabilityScanService{}
}

// Scan is a handler function for the /cve-scan endpoint
// It takes a sbom and returns a json document containing the cve information
// e.g.
//	curl --location --request POST 'http://127.0.0.1:8085/cve-scan?image-name=dum-im&image-id=abc1234&scan-id=xyz456' \
//	--header 'Content-Type: application/json' \
//	--data-raw '/*sbom json*/'
func (c *VulnerabilityScanService) Scan(gc *gin.Context) {
	// userInput is a vulnerability sbom in json format
	userInput, err := gc.GetRawData()
	if err != nil {
		fmt.Println(err)
		gc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}

	// get imageName, imageId, scanId, kubernetesClusterName, scanType from the request
	imageName := gc.Query("image-name")
	imageID := gc.Query("image-id")
	k8sClusterName := gc.Query("k8s-cluster-name")
	scanId := gc.Query("scan-id")

	// validate sbom and return error if invalid
	if err := utils.ValidateSbom(userInput); err != nil {
		gc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		log.Errorf("Invalid sbom: %s", err.Error())
		return
	}

	// start a go routine here
	go func() {
		// create a temporary file to store the user input(SBOM)
		file, err := utils.TempSBOMFile(userInput)
		if err != nil {
			log.Errorf("Error creating temp file: %s\n", err)
			return
		}

		defer os.Remove(file.Name())

		outputBytes, err := grype.Scan(file.Name())
		if err != nil {
			log.Errorf("Error while scanning: %s\n", err)
		}
		report, err := grype.PopulateFinalReport(outputBytes, imageName, imageID, k8sClusterName, scanId)
		if err != nil {
			log.Errorf("Error while populating final report: %s", err)
		}

		s := fmt.Sprintf("[%s]", utils.TrimSuffix(report, ","))
		utils.WriteToFile([]byte(s))
		// call the injest api to upload the results
		err = utils.Injest(s)
		if err != nil {
			log.Errorf("Error while injesting: %s", err)
		}

		log.Infof("Scan completed for image: %s", imageName)
	}()
	gc.JSON(http.StatusOK, gin.H{"status": "scan started"})
}
