// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// KernelTracerClient is the client API for KernelTracer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KernelTracerClient interface {
	GetKernelSupport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KernelInfo, error)
	GetPIDTraceInfo(ctx context.Context, in *PIDTraceInfoRequest, opts ...grpc.CallOption) (KernelTracer_GetPIDTraceInfoClient, error)
}

type kernelTracerClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelTracerClient(cc grpc.ClientConnInterface) KernelTracerClient {
	return &kernelTracerClient{cc}
}

func (c *kernelTracerClient) GetKernelSupport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KernelInfo, error) {
	out := new(KernelInfo)
	err := c.cc.Invoke(ctx, "/kernel_tracer.KernelTracer/GetKernelSupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelTracerClient) GetPIDTraceInfo(ctx context.Context, in *PIDTraceInfoRequest, opts ...grpc.CallOption) (KernelTracer_GetPIDTraceInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KernelTracer_serviceDesc.Streams[0], "/kernel_tracer.KernelTracer/GetPIDTraceInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelTracerGetPIDTraceInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KernelTracer_GetPIDTraceInfoClient interface {
	Recv() (*TraceInfo, error)
	grpc.ClientStream
}

type kernelTracerGetPIDTraceInfoClient struct {
	grpc.ClientStream
}

func (x *kernelTracerGetPIDTraceInfoClient) Recv() (*TraceInfo, error) {
	m := new(TraceInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KernelTracerServer is the server API for KernelTracer service.
// All implementations must embed UnimplementedKernelTracerServer
// for forward compatibility
type KernelTracerServer interface {
	GetKernelSupport(context.Context, *Empty) (*KernelInfo, error)
	GetPIDTraceInfo(*PIDTraceInfoRequest, KernelTracer_GetPIDTraceInfoServer) error
	mustEmbedUnimplementedKernelTracerServer()
}

// UnimplementedKernelTracerServer must be embedded to have forward compatible implementations.
type UnimplementedKernelTracerServer struct {
}

func (UnimplementedKernelTracerServer) GetKernelSupport(context.Context, *Empty) (*KernelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKernelSupport not implemented")
}
func (UnimplementedKernelTracerServer) GetPIDTraceInfo(*PIDTraceInfoRequest, KernelTracer_GetPIDTraceInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPIDTraceInfo not implemented")
}
func (UnimplementedKernelTracerServer) mustEmbedUnimplementedKernelTracerServer() {}

// UnsafeKernelTracerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KernelTracerServer will
// result in compilation errors.
type UnsafeKernelTracerServer interface {
	mustEmbedUnimplementedKernelTracerServer()
}

func RegisterKernelTracerServer(s grpc.ServiceRegistrar, srv KernelTracerServer) {
	s.RegisterService(&_KernelTracer_serviceDesc, srv)
}

func _KernelTracer_GetKernelSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelTracerServer).GetKernelSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel_tracer.KernelTracer/GetKernelSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelTracerServer).GetKernelSupport(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelTracer_GetPIDTraceInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PIDTraceInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelTracerServer).GetPIDTraceInfo(m, &kernelTracerGetPIDTraceInfoServer{stream})
}

type KernelTracer_GetPIDTraceInfoServer interface {
	Send(*TraceInfo) error
	grpc.ServerStream
}

type kernelTracerGetPIDTraceInfoServer struct {
	grpc.ServerStream
}

func (x *kernelTracerGetPIDTraceInfoServer) Send(m *TraceInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _KernelTracer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kernel_tracer.KernelTracer",
	HandlerType: (*KernelTracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKernelSupport",
			Handler:    _KernelTracer_GetKernelSupport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPIDTraceInfo",
			Handler:       _KernelTracer_GetPIDTraceInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kernel_tracer.proto",
}
